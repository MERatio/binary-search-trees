(()=>{"use strict";const t=class{constructor(t){this.data=t,this.left=null,this.right=null}};class e{constructor(t){const e=[...new Set(t)].sort(((t,e)=>t-e));this.root=this.#t(e)}static prettyPrint(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];null!==t&&(null!==t.right&&this.prettyPrint(t.right,`${e}${r?"│   ":"    "}`,!1),console.log(`${e}${r?"└── ":"┌── "}${t.data}`),null!==t.left&&this.prettyPrint(t.left,`${e}${r?"    ":"│   "}`,!0))}static height(t){return null===t?-1:Math.max(this.height(t.left),this.height(t.right))+1}#t(e){if(0===e.length)return null;const r=Math.floor((e.length-1)/2),o=new t(e[r]);return o.left=this.#t(e.slice(0,r)),o.right=this.#t(e.slice(r+1)),o}#e(e,r){if(null===e)return new t(r);if(e.data>r)e.left=this.#e(e.left,r);else{if(!(e.data<r))throw new Error("Trees cannot contain any duplicate values.");e.right=this.#e(e.right,r)}return e}#r(t,e){if(null===t)return t;if(t.data>e)return t.left=this.#r(t.left,e),t;if(t.data<e)return t.right=this.#r(t.right,e),t;if(null===t.left)return t.right;if(null===t.right)return t.left;{let e=t,r=t.right;for(;null!==r.left;)e=r,r=r.left;return e!==t?e.left=r.right:e.right=r.right,t.data=r.data,t}}#o(t,e){return null===t?null:t.data>e?this.#o(t.left,e):t.data<e?this.#o(t.right,e):t}#l(t,e){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return null===t?-1:t.data>e.data?this.#l(t.left,e,r+1):t.data<e.data?this.#l(t.right,e,r+1):r}#i(t){if(null===t)return!0;const r=e.height(t.left),o=e.height(t.right);return Math.abs(r-o)<=1&&this.#i(t.left)&&this.#i(t.right)}#n(t){return null===t?[]:[...this.#n(t.left),t.data,...this.#n(t.right)]}insert(t){this.root=this.#e(this.root,t)}delete(t){this.root=this.#r(this.root,t)}find(t){return this.#o(this.root,t)}levelOrder(t){if(null===this.root&&void 0===t)return[];const e=[this.root],r=[];for(;e.length>0;){const o=e.shift();t?t(o):r.push(o.data),null!==o.left&&e.push(o.left),null!==o.right&&e.push(o.right)}return void 0===t?r:void 0}inOrder(t){const e=[];if(function t(r,o){null!==r&&(t(r.left,o),o?o(r):e.push(r.data),t(r.right,o))}(this.root,t),void 0===t)return e}preOrder(t){const e=[];if(function t(r,o){null!==r&&(o?o(r):e.push(r.data),t(r.left,o),t(r.right,o))}(this.root,t),void 0===t)return e}postOrder(t){const e=[];if(function t(r,o){null!==r&&(t(r.left,o),t(r.right,o),o?o(r):e.push(r.data))}(this.root,t),void 0===t)return e}depth(t){return this.#l(this.root,t)}isBalanced(){return this.#i(this.root)}rebalance(){const t=this.#n(this.root);this.root=this.#t(t)}}const r=e;!function(){const t=new r([0,1,2,3,4,5,6,7,8,9]);r.prettyPrint(t.root),console.log("is balanced?",t.isBalanced()),console.log("level order no cb:",t.levelOrder()),console.log("inOrder no cb::",t.inOrder()),console.log("preOrder no cb::",t.preOrder()),console.log("postOrder no cb::",t.postOrder()),console.log("insert 101:",t.insert(101)),console.log("insert 102:",t.insert(102)),console.log("insert 103:",t.insert(103)),r.prettyPrint(t.root),console.log("is balanced?",t.isBalanced()),console.log("rebalance:",t.rebalance()),r.prettyPrint(t.root),console.log("is balanced?",t.isBalanced()),console.log("level order no cb:",t.levelOrder()),console.log("inOrder no cb::",t.inOrder()),console.log("preOrder no cb::",t.preOrder()),console.log("postOrder no cb::",t.postOrder()),console.log("------------------------------"),console.log("height of root:",r.height(t.root)),console.log("depth of 8:",t.depth(t.root.right.left.right)),console.log("delete tree root node:",t.delete(t.root.data)),r.prettyPrint(t.root),console.log("find 8:",t.find(8))}()})();
//# sourceMappingURL=app.bundle.js.map